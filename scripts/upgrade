#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
  ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
port=$(ynh_app_setting_get --app=$app --key=port)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
version=$(ynh_app_setting_get --app=$app --key=version)
data_path=$(ynh_app_setting_get --app=$app --key=data_path)
team_display_name=$(ynh_app_setting_get --app=$app --key=team_display_name)
admin=$(ynh_app_setting_get --app=$app --key=admin)
password=$(ynh_app_setting_get --app=$app --key=password)
email=$(ynh_user_get_info --username=$admin --key=mail)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

previous_upstream_version="$(ynh_app_upstream_version --manifest="/etc/yunohost/apps/$YNH_APP_INSTANCE_NAME/manifest.json")"
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
  # Restore it if the upgrade fails
  ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Save the port used if not present
if [ -z "$port" ]; then
  port=8065
  ynh_app_setting_set --app=$app --key=port --value=$port
fi

# Save the language used if not present
if [ -z "$language" ]; then
  language="en"
  ynh_app_setting_set --app=$app --key=language --value=$language
fi

# If version setting doesn't exist
if [ -z "$version" ]; then
  version="Enterprise"
  ynh_app_setting_set --app=$app --key=version --value=$version
fi

if [ -z "$db_name" ]; then
   db_name="$app"
   ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$data_path" ]; then
  data_path="/home/yunohost.app/$app"
 ynh_app_setting_set --app=$app --key=data_path --value=$data_path
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
  ynh_legacy_permissions_delete_all

  ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=3

ynh_systemd_action --service_name=$app --action=stop --log_path="/var/log/$app/$app.log"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
  ynh_script_progression --message="Upgrading source files..." --weight=2

  # Create a temporary directory
  tmpdir="$(mktemp -d)"

  # Backup the config file and local plugins in the temp dir
  #cp -a "$final_path/config/config.json" "$tmpdir/config.json"
  cp -ar "$final_path/plugins" "$tmpdir/plugins"

  # Remove the app directory securely
  ynh_secure_remove --file="$final_path"

  if [ "$version" = "Enterprise" ]; then
    ynh_setup_source --dest_dir="$final_path" --source_id="enterprise"
  elif [ "$version" = "Team" ]; then
    ynh_setup_source --dest_dir="$final_path" --source_id="$YNH_ARCH"
  fi

  # Copy the admin saved settings and plugins from tmp directory to final path
  #cp -a "$tmpdir/config.json" "$final_path/config/config.json" 
  cp -ar --no-clobber "$tmpdir/plugins" "$final_path/"

  # Remove the tmp directory securely
  ynh_secure_remove --file="$tmpdir"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=5

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=10

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies

#=================================================
# MIGRATING DATABASE
#=================================================

if mysqlshow | grep -q "^| $db_name "; then

  ynh_script_progression --message="Creating a PostgreSQL database..." --weight=10

  postgresql_db_pwd=$(ynh_string_random --length=24)
  ynh_app_setting_set --app=$app --key=postgresql_db_pwd --value=$postgresql_db_pwd
  ynh_psql_test_if_first_run
  ynh_psql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$postgresql_db_pwd
  # Migrating from MySQL to PostgreSQL
  pgloader mysql://$db_user:$db_pwd@localhost:3306/$db_name postgresql://$db_user:$postgresql_db_pwd@localhost:5432/$db_name
  # Removinging MySQL database
  ynh_mysql_remove_db --db_user=$db_user --db_name=$db_name
else
  ynh_print_info --message="No migration needed"
fi

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=3

smtp_user_pwd=$(ynh_string_random --length=24)
url=https://$domain$path_url

ynh_add_config --template="../conf/config.json" --destination="$final_path/config/config.json"

chmod 400 "$final_path/config/config.json"
chown $app:$app "$final_path/config/config.json"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=2

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="Collaboration platform built for developers" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

# Start a systemd service
ynh_systemd_action --service_name=$app --action=start --log_path=systemd --line_match="Started Mattermost"

#=================================================
# CREATE ADMIN AND FIRST TEAM
#=================================================
# ynh_script_progression --message="Create the first administrator and team..." --weight=1

# team_name=$(echo "$team_display_name" | iconv -f utf8 -t ascii//TRANSLIT//IGNORE | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)
# bin_mmctl="$final_path/bin/mmctl"

# # mmctl is not packaged with ARM versions yet
# if [[ -f "$bin_mmctl" ]]; then
#   export MMCTL_LOCAL=true
#   export MMCTL_LOCAL_SOCKET_PATH="$local_socket_path"

#   ynh_exec_warn_less sudo --preserve-env -u $app "$bin_mmctl" user create --username "$admin" --email "$email" --password "$password" --locale "$language" --email-verified --system-admin
#   ynh_exec_warn_less sudo --preserve-env -u $app "$bin_mmctl" team create --name "$team_name" --display_name "$team_display_name" --email "$email"
#   ynh_exec_warn_less sudo --preserve-env -u $app "$bin_mmctl" team users add "$team_name" "$admin"
# fi

# # Disable mmctl passwordless access
# ynh_replace_string '"EnableLocalMode": true' '"EnableLocalMode": false' "$final_path/config/config.json"
# ynh_systemd_action --service_name=$app --action=restart --log_path=systemd --line_match="Started Mattermost"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
